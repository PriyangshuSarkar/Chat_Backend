generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
}

model Booking {
  id         String    @id
  date       DateTime
  userId     String
  businessId String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime
  Business   Business  @relation(fields: [businessId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

model Business {
  id                          String                        @id
  name                        String?
  slug                        String?                       @unique
  additionalContacts          String[]
  password                    String?
  salt                        String?
  isBusinessVerified          Boolean                       @default(false)
  type                        BusinessType                  @default(INDIVIDUAL)
  subscriptionId              String?
  subscriptionExpire          DateTime?
  averageRating               Float?
  reviewCount                 Int                           @default(0)
  isListed                    Boolean                       @default(false)
  isBlocked                   Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  deletedAt                   DateTime?
  paymentVerification         Boolean                       @default(false)
  price                       Float?
  razorpay_order_id           String?                       @unique
  Booking                     Booking[]
  BusinessSubscription        BusinessSubscription?         @relation(fields: [subscriptionId], references: [id])
  BusinessDetails             BusinessDetails?
  BusinessPrimaryContact      BusinessPrimaryContact[]
  BusinessSupportingDocuments BusinessSupportingDocuments[]
  Chat                        Chat[]
  Review                      Review[]

  @@index([averageRating])
  @@index([isBusinessVerified])
  @@index([isListed])
  @@index([name])
  @@index([reviewCount])
  @@index([subscriptionId])
}

model BusinessSubscription {
  id          String       @id
  name        String
  description String?
  type        BusinessType
  price       Float
  duration    Int
  features    String[]
  tierLevel   Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  Business    Business[]
}

model Category {
  id              String            @id
  name            String
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  categoryImage   String?
  updatedAt       DateTime
  BusinessDetails BusinessDetails[]
}

model City {
  id      String    @id
  name    String
  slug    String?   @unique
  stateId String
  State   State     @relation(fields: [stateId], references: [id])
  Pincode Pincode[]
}

model Country {
  id    String  @id
  name  String
  slug  String? @unique
  State State[]
}

model Pincode {
  id     String  @id
  code   String  @unique
  slug   String? @unique
  cityId String
  City   City    @relation(fields: [cityId], references: [id])
}

model Review {
  id         String    @id
  rating     Int
  comment    String?
  businessId String?
  userId     String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime
  Business   Business? @relation(fields: [businessId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

model State {
  id        String  @id
  name      String
  slug      String? @unique
  countryId String
  City      City[]
  Country   Country @relation(fields: [countryId], references: [id])
}

model Tag {
  id              String            @id
  name            String            @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime
  BusinessDetails BusinessDetails[] @relation("BusinessDetailsToTag")
}

model User {
  id                  String            @id
  name                String
  slug                String?           @unique
  password            String?
  salt                String?
  hideDetails         Boolean           @default(true)
  isBlocked           Boolean           @default(false)
  avatar              String?
  subscriptionId      String?
  subscriptionExpire  DateTime?
  paymentVerification Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  deletedAt           DateTime?
  razorpay_order_id   String?           @unique
  Booking             Booking[]
  Chat                Chat[]
  Review              Review[]
  UserSubscription    UserSubscription? @relation(fields: [subscriptionId], references: [id])
  UserAddress         UserAddress[]
  UserContact         UserContact[]

  @@index([subscriptionId])
}

model UserSubscription {
  id          String    @id
  name        String
  description String?
  price       Float
  duration    Int
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  User        User[]
}

model Chat {
  id         String    @id @default(uuid())
  userId     String
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Business   Business  @relation(fields: [businessId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
  Messages   Message[]

  @@unique([userId, businessId])
}

model Message {
  id         String     @id @default(uuid())
  content    String
  senderType SenderType
  chatId     String
  createdAt  DateTime   @default(now())
  readAt     DateTime?
  fileType   String?
  fileUrl    String?
  Chat       Chat       @relation(fields: [chatId], references: [id])
}

model BusinessAddress {
  id                String           @id
  businessDetailsId String?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime
  order             Int?
  street            String
  city              String
  country           String
  pincode           String
  state             String
  BusinessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model BusinessDetails {
  id                          String                        @id
  registrationNumber          String?
  license                     String?
  experience                  Int?
  teamSize                    Int?
  description                 String?
  latitude                    Float?
  longitude                   Float?
  degree                      String[]
  gstNumber                   String?
  categoryId                  String?
  logo                        String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  deletedAt                   DateTime?
  BusinessAdBannerImage       BusinessAdBannerImage[]
  BusinessAddress             BusinessAddress[]
  BusinessCoverImage          BusinessCoverImage[]
  Category                    Category?                     @relation(fields: [categoryId], references: [id])
  Business                    Business                      @relation(fields: [id], references: [id])
  BusinessMobileAdBannerImage BusinessMobileAdBannerImage[]
  BusinessOperatingHours      BusinessOperatingHours[]
  BusinessWebsite             BusinessWebsite[]
  Court                       Court[]                       @relation("BusinessDetailsToCourt")
  Language                    Language[]                    @relation("BusinessDetailsToLanguage")
  Proficiency                 Proficiency[]                 @relation("BusinessDetailsToProficiency")
  Tag                         Tag[]                         @relation("BusinessDetailsToTag")

  @@index([categoryId])
}

model BusinessPrimaryContact {
  id           String      @id
  businessId   String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  order        Int?
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  Business     Business    @relation(fields: [businessId], references: [id])

  @@unique([businessId, type, isPrimary])
  @@index([type])
  @@index([value])
}

model BusinessSupportingDocuments {
  id         String    @id
  businessId String
  type       String
  url        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  Business   Business  @relation(fields: [businessId], references: [id])
}

model BusinessWebsite {
  id                String           @id
  type              String
  url               String
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime
  businessDetailsId String?
  BusinessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model Court {
  id              String            @id
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime
  BusinessDetails BusinessDetails[] @relation("BusinessDetailsToCourt")
}

model Language {
  id              String            @id
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime
  BusinessDetails BusinessDetails[] @relation("BusinessDetailsToLanguage")
}

model Proficiency {
  id              String            @id
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime
  BusinessDetails BusinessDetails[] @relation("BusinessDetailsToProficiency")
}

model UserAddress {
  id        String    @id
  userId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime
  order     Int?
  street    String
  city      String
  country   String
  pincode   String
  state     String
  User      User      @relation(fields: [userId], references: [id])
}

model UserContact {
  id           String      @id
  userId       String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  order        Int?
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  User         User        @relation(fields: [userId], references: [id])

  @@unique([userId, type, isPrimary])
  @@index([type])
  @@index([userId])
  @@index([value])
}

model BusinessAdBannerImage {
  id                String           @id
  url               String
  order             Int?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime
  businessDetailsId String?
  BusinessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model BusinessCoverImage {
  id                String           @id
  url               String
  order             Int?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime
  businessDetailsId String?
  BusinessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model BusinessMobileAdBannerImage {
  id                String           @id
  url               String
  order             Int?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime
  businessDetailsId String?
  BusinessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model BusinessOperatingHours {
  id                String          @id
  businessDetailsId String
  dayOfWeek         DayOfWeek
  openingTime       String
  closingTime       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  deletedAt         DateTime?
  BusinessDetails   BusinessDetails @relation(fields: [businessDetailsId], references: [id])

  @@unique([businessDetailsId, dayOfWeek])
}

enum SenderType {
  USER
  BUSINESS
}

enum BusinessType {
  INDIVIDUAL
  FIRM
}

enum ContactType {
  EMAIL
  PHONE
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
